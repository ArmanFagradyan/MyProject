/// 3 способа задать перменные

  1) var leftBorderWidth = 1;
  2) let second = 2;
  3) const pi = 3.14;


*  var - предупреждает что сейчас будет переменная
   'Name' - дальше идет имя перменной
   var сущетсвует везде в коде и даже до того как она добалена

*  let начинает сущетсвовать только после того как до него доходит код 

* const работает аналогично с let, так же он задает константу,
    которую можно изменить только особыми обходными путями

____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________

/// Типы данных и их классификация 

см. DataTypes.jpg в файлах

1) число
2) строка
3) символ
4) логическое начение
5) null
6) undefined 
7) obj

* числа могут быть целыми и дробными, а также специальные 
числовые значения (infinity это при деление на ноль) и 
not a number (операция не подлежит математической логике)
 
* null это когда чего-то в коде вообще не сущестует 
undefined это когда какой-либо объект существует но не имеет значение

* obj - это коллекция данных, структура которая используется 
для хранения любых данных, в нем могут содеражться все вышеприведенные
типы данных (он комплексный). Внутри фигурных скобок находится 
Свойство (или Метод). Методы - это функции, т.е. действия которые 
может выполнять объект.

* чтобы вытянуть значение свойсвта используем точку или квадратные скобки.

* массивы используются для хранения данных, которые идут по порядку, 
он заключается в квадратные скобки и построен так, что каждому значению
автоматически присваивается порядковый номер. 

    let arr = ['plum.png', 'orange.jpg' , 'apple.bmp'];
    console.log(arr[2]);

нумерация в массиве начинается с 0. В консоли при выводе пишем порядковый
номер элемента массива.

____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________

/// Простое общение с пользователем 

* Основаня команда разработчиков это console.log

* Всплывает окно с подтверждением и ответ выводится в консоль.

    let answere = confirm("Are you here?");
    console.log(answere);


* Всплывает окно с полем ввода, и ответ выводится в консоль. 

    let answere = prompt("Are you over 18?", "Yes");
    console.log(answere);

* Всплывает окно с полем ввода, но в консоль в любом случае название
типа данных, находящихся в скобках.

    let answere = prompt("Are you over 18?", "Yes");
    console.log(typeof(answere));


____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________

/// Операторы в JS 

(сложение, вычитание, умножение, деление)

* конкатенация для оператора СЛОЖЕНИЯ 
строка + строка = строка  
строка + число = строка 

* унарный + перед prompt меняет строку на число 

    let answere = +prompt("Are you over 18?", "Yes");

* префиксная форма добавления + выдает измененное значение, а 
постфиксная форма выдает старое хначние и только потом меняет его

    log.console(++incr);
    log.console(--decr); 

    //

    log.console(incr++);
    log.console(decr--):


* Оператор % выдает остаток от деления чисел 

    log.console(5%2);

* Оператор =

    = это присваивание 
    == проверка на равенство (сравнивет по значениям)
    === строгая проверка по типам данных 

* И и ИЛИ 

    && - два амперсанта показывают пересечение (-И-)
    || - две вертикальные полосы показывают сложение (-ИЛИ-) 
Немного про применение данных операторов: например можем 
проверить отмечены ли оба чекбокса итд. 

* Оператор ОТРИЦАНИЕ

    ! - например console.log(ab || !dr) будет искать пересечение
        значения ab и обратного значения dr.

* Порядок выполнения операций (приоритет операторов)

см. https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

директива usestrict говорит о том, что мы используем стандарт ES6
и некоторые ошибки прошлого работать не будут

____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________

/// Контроль версий Git и репозиторий GitHub

* Git - э то система контроля версий а GitHub - это удаленное хранилище репозиториев. 
    обучение гиту: https://githowto.com/ru
    документация по гиту: https://git-scm.com/book/ru/v2
    интерактивное обучение гиту: https://learngitbranching.js.org/?locale=ru_RU

* Подключить Git к папке с работой, чтобы он следил за ней, можно использовав в терминале команду git init 

* Чтобы как-то себя авторизовать в git, для того чтобы тебя могли определить другие пользователи репозиторием 
нужнв команда 

    git config --global user.name "Name" 
    git config --global user.email email

данный вариант устанавливает имя и почту глобально для всего компьютера, а чтобы сделать это локально надо поменять 
--global  на --local           

* Команда git status показывает статус гита, то есть за какими файлами он следит
* Команда git add -A добавляет все файлы (-А от слова All)

* Используем команду git commit -a -m"Commit message" которая создает так называемую контрольную точку -а говорит, что коммитим все файлы 
-m означает message, т.е. после него в ковычках пишем содержательное сообщение касательно первого коммита.

* Команда git log показывает историю коммитов 

* Сервис GitHub позволяет хранить наши репозитории на сервере, чтобы это было в общем доступе и можно было это использовать вслучаях когда
локальное сохранение потеряно. 

* Используем команду git push чтобы отправить изменения в репозиторий в GitHub 

____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________

/// Как можно работать с GitHub  с разных компьютеров, gitignore, GitKraken 

* Чтобы скопировать репозиторий и перенсти его в свою папку, создаем в общей своей папке новую папку, потом через терминал выходим из 
текущей папки с помощью команды cd .. дальше также через терминал заходим в новую, соданную нами папку, с помощтю команды cd name (имя новой папки).
После этого копируем через GitHun ссылку на нужный репозиторий и прописываем команду git clone "скопированны адрес" "Задаем имя папке".

Команда git pull переносит изменения сделанные в репозитории с одного пк на свой пк.

* файл .gitignore нужен для того чтобы определные файлы не пушились в GitHub, например если это очень большие файлы и их нецелесообразно пушить или
пулить через терминал. 

* GitKraken - софт для удобной работы с репозиториями 

____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________

/// Условия 

Условия - это принципы помогающие пустить программу или действия по правильному пути

* Пример 1:

        let num = 50;

        if (num < 49) {
            console.log("Not right");
        } else if (num > 100) {
            console.log("Too much");
        } else {
            console.log("Right");

В круглых скобках указывается нужное нам условие, а в фигурных скобках указываем то действие, которое должно быть выполнено при соблюжении услоовия.
После else указываем альтернативное условие по той же системе.

* Пример 2:

        (num == 50) ? console.log('Right'): console.log('Wrong');

Это замис в виде тернарного оператора. Внутри круглых скобок условие, потом вопросительный знак и действие, которое должно выполниться, а дальше дейтсвие,
которое выполниться если условие не верно.


* Пример 3:

        switch (num) {
            case num < 49:
                console.log('Right');
                break;
            case num > 100:
                console.log('Too much');
                break;
            case num > 80:
                console.log('Still too much');
                break;
            case 50:
                console.log('Right');
                break;
            default:
                console.log('Something went wrong');
        }

Это практичнаямодификация для if. В первых скобках пишем то, что будем проверять. В фигурных скобках пишем проверки, т.е. начинаем со case и пишем условие,
потом после двоеточия пишем дейтсвие, которое должно выполниться при условии. После этого ставим break, эта директива нужна, чтобы цикл завершился, если  
условие выполнилось. При проверке на реальное значение, пишем просто само значение(т.е. без переменной). Есть структура default, она нужна, когда ни одно 
из условий выше не выполнилось. 

____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________

/// Циклы 

Циклы - это главный элемент автоматизации. 

* Есть три цикла:

* Первый пример: 

        let num = 50;

        while (num < 55) {
            console.log(num);
            num++;
        }
В курглых скобках пишем условие. В фигурных скобках пишем порядок действий.

* Второй пример:

        let num = 50;
        do {
            console.log(num);
            num++;
        }
        while (num < 55);
В данном случае конструкция сначала призывает к дейтсвию, а лишь потом пишем до каких пор должен выполняться набор дейтсвий.

* Третий пример: 

        for (let i = 1; i < 8; i++) {
            if (i == 6) {
                break;
            }
            console.log(i);
        }


        for (let i = 1; i < 8; i++) {
            if (i == 6) {
                continue;
            }
            console.log(i);
        }
Используется чаще всего. В скобках, сначала задаем переменную или просто пишем переменную, после точки с запятой пишем условие,
далее после точки с запятой пишем действие, которое должно быть выполнено пока не выполнено условие. В фигурных скобках пишем действия.
Нужно быть осторожным с циклом, чтобы не появился бесконечный цикл, который заставит все зависнуть. Директива break так же тут может 
быть использована для прерывания цикла. Директива continue позволяет пропустить один шаг в дейтсвии, то есть перрывается одна итерация цикла.

____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________

/// Функции 

Полезные ссылки: 
    *  Про замыкание функций https://medium.com/nuances-of-programming/я-никогда-не-понимал-замыкания-в-javascript-часть-первая-3c3f02041970  
    *  Про метод строк  https://learn.javascript.ru/string  
    *  Про метод чисел https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Number   

Если по простому, то функции это наши действия в JS. Они используют различные тпиы данных и изменяют информацию так как мы укажем. 
Для того чтобы задать функцию пишем: function затем пишем имя нашей новой функции, открываем круглые скобки для аргументов фукнции,
дальше в фигурных скобках пишем то,что будет выполняться. 