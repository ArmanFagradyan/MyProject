/// 3 способа задать перменные

  1) var leftBorderWidth = 1;
  2) let second = 2;
  3) const pi = 3.14;


*  var - предупреждает что сейчас будет переменная
   'Name' - дальше идет имя перменной
   var сущетсвует везде в коде и даже до того как она добалена

*  let начинает сущетсвовать только после того как до него доходит код 

* const работает аналогично с let, так же он задает константу,
    которую можно изменить только особыми обходными путями

_________________________________________________________________________
_________________________________________________________________________
_________________________________________________________________________

/// Типы данных и их классификация 

см. DataTypes.jpg в файлах

1) число
2) строка
3) символ
4) логическое начение
5) null
6) undefined 
7) obj

* числа могут быть целыми и дробными, а также специальные 
числовые значения (infinity это при деление на ноль) и 
not a number (операция не подлежит математической логике)
 
* null это когда чего-то в коде вообще не сущестует 
undefined это когда какой-либо объект существует но не имеет значение

* obj - это коллекция данных, структура которая используется 
для хранения любых данных, в нем могут содеражться все вышеприведенные
типы данных (он комплексный). Внутри фигурных скобок находится 
Свойство (или Метод). Методы - это функции, т.е. действия которые 
может выполнять объект.

* чтобы вытянуть значение свойсвта используем точку или квадратные скобки.

* массивы используются для хранения данных, которые идут по порядку, 
он заключается в квадратные скобки и построен так, что каждому значению
автоматически присваивается порядковый номер. 

    let arr = ['plum.png', 'orange.jpg' , 'apple.bmp'];
    console.log(arr[2]);

нумерация в массиве начинается с 0. В консоли при выводе пишем порядковый
номер элемента массива.

_________________________________________________________________________
_________________________________________________________________________
_________________________________________________________________________

/// Простое общение с пользователем 

* Основаня команда разработчиков это console.log

* Всплывает окно с подтверждением и ответ выводится в консоль.

    let answere = confirm("Are you here?");
    console.log(answere);


* Всплывает окно с полем ввода, и ответ выводится в консоль. 

    let answere = prompt("Are you over 18?", "Yes");
    console.log(answere);

* Всплывает окно с полем ввода, но в консоль в любом случае название
типа данных, находящихся в скобках.

    let answere = prompt("Are you over 18?", "Yes");
    console.log(typeof(answere));


_________________________________________________________________________
_________________________________________________________________________
_________________________________________________________________________

/// Операторы в JS 

(сложение, вычитание, умножение, деление)

* конкатенация для оператора СЛОЖЕНИЯ 
строка + строка = строка  
строка + число = строка 

* унарный + перед prompt меняет строку на число 

    let answere = +prompt("Are you over 18?", "Yes");

* префиксная форма добавления + выдает измененное значение, а 
постфиксная форма выдает старое хначние и только потом меняет его

    log.console(++incr);
    log.console(--decr); 

    //

    log.console(incr++);
    log.console(decr--):


* Оператор % выдает остаток от деления чисел 

    log.console(5%2);

* Оператор =

    = это присваивание 
    == проверка на равенство (сравнивет по значениям)
    === строгая проверка по типам данных 

* И и ИЛИ 

    && - два амперсанта показывают пересечение (-И-)
    || - две вертикальные полосы показывают сложение (-ИЛИ-) 
Немного про применение данных операторов: например можем 
проверить отмечены ли оба чекбокса итд. 

* Оператор ОТРИЦАНИЕ

    ! - например console.log(ab || !dr) будет искать пересечение
        значения ab и обратного значения dr.

* Порядок выполнения операций (приоритет операторов)

см. https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

директива usestrict говорит о том, что мы используем стандарт ES6
и некоторые ошибки прошлого работать не будут

_________________________________________________________________________
_________________________________________________________________________
_________________________________________________________________________

/// Контроль версий Git и репозиторий GitHub

* Git - э то система контроля версий а GitHub - это удаленное хранилище репозиториев. 
    обучение гиту: https://githowto.com/ru
    документация по гиту: https://git-scm.com/book/ru/v2
    интерактивное обучение гиту: https://learngitbranching.js.org/?locale=ru_RU

* Подключить Git к папке с работой, чтобы он следил за ней, можно использовав в терминале команду git init 

* Чтобы как-то себя авторизовать в git, для того чтобы тебя могли определить другие пользователи репозиторием 
нужнв команда 

    git config --global user.name "Name" 
    git config --global user.email email

данный вариант устанавливает имя и почту глобально для всего компьютера, а чтобы сделать это локально надо поменять 
--global  на --local           

* Команда git status показывает статус гита, то есть за какими файлами он следит
* Команда git add -A добавляет все файлы (-А от слова All)

* Используем команду git commit -a -m"Commit message" которая создает так называемую контрольную точку -а говорит, что коммитим все файлы 
-m означает message, т.е. после него в ковычках пишем содержательное сообщение касательно первого коммита.

* Команда git log показывает историю коммитов 

* Сервис GitHub позволяет хранить наши репозитории на сервере, чтобы это было в общем доступе и можно было это использовать вслучаях когда
локальное сохранение потеряно. 

* Используем команду git push чтобы отправить изменения в репозиторий в GitHub 
