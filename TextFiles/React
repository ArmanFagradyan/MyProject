/// Начало 

С его помощью можно создавать одностраничные приложения SPA, реагируют на пользователя и изменяют UI 
Пример: Slack, Google mail, Figma, Facebook, Instagram

* React контролирует использование памяти нашим веб-приложением, реакт декларативен, то есть нужно просто указывать как будет выглядеть каждая часть интерфейса
Императивный - это объяснить как все должно быть сделаоно, чтобы выглядело как нам надо (как?)
Декларативный - это объяснть итоговый результат, то есть не нужно описание каждого шага для достижения результата (что?)

* React основан на повторяющихся компонентах, модульная структура UI components, они компактны и независимы почти как функции.
Использование компонентов позволяют держать чистоты глобального пространства.
Компоненты повторно используемы и легко изменяемы.
Learn once - use everywhere.

* React Native - позволяет создавать нативные приложения 
* React 360 - создание VR приложений

* Внутри React используется препроцессор JSX (помесь JS и HTML).
React также можно использовать нативный JS.

* В React есть алгоритм отслеживания изменения частей приложения и изменения конкретно их (Reconsiliation algorihtm).

* Технология Virtual DOM - легкая копия DOM дерева, в котором мы работаем и уже потом переносим в основное дерево.


____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
/// Create React App

* Встроенный сборщик приложения (index.js главный файл, App.js - файл с базовой разметкой, public папка, и еще несколько файлов создается при инициализации, в index.html есть тег noscript и тег div с id = "root" куда будет рендериться наше веб-приложение, package.json, есть встроенный esLint и лучше выключить jsHint, чтобы не ругался).

* Переводом JSX в JS занимается Babel
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
/// Препроцессор JSX 

* В index.js сначала идут импорты React - отвечающий за базовую работу реакта и JSX, ReactDOM - отвечающий за работу с DOM структурой на странице (библиотека позволят вставлять результат работы реакта на страницу, другие сторонние библиотеки, и импорты стилей и функций). 

Пример JSX: const elem = <h2>Hello World!</h2>;

Пример без JSX: const elem = React.createElement('h2', 'null', 'Hello World!'); 
                или const elem = React.createElement('h2', {className: 'greetings'}, 'Hello World!'); 
Первое - название элемента в верстке, Второе - название css классов или null если нет, Третье - содержимое тега. Во втором примере кода Babel не задействуется. Результат второго кода выглядел бы примерно так:

                const elem = {
                    type: 'h2',
                    props: {
                        className: 'greetings',
                        children: 'Hello World!'
                    }
                };

                Вернется вот такой объект.

* Для объемного кода удобнее использовать JSX.
* Нужно ли импортировать React в каждый файл? Нет, после 17 версии импортировать реакт надо только в главный файл index.js.
Первый пример с JSX называется элементом, если в нем есть вложенность то нужно обратить его в круглые скобки. В многострочном элемнте должен быть всегда один родитель, а остальное уже будет вложено в него.
* В настройки Emmet нужно добавить React, чтобы ускорять написание HTML тегов.
* В теги можно вставлять переменные, выражения и все кроме объектов оборачивая их в фигурные скобки:

                const text = 'Hello World!';
                const elem = (
                    <div>
                        <h2>Текст: {text}</h2>
                    </div>
                );

* При работе с index.js HotReload может иногда не срабатывать.
* В React все значения экранируются и переводятся в строки, что помогает избавиться от риска ввода вредоносного скрипта пользователем.
* Атрибуты в геха пишутся в формате camelCase, также есть специальные атрибуты, которые не совпадают с обычными атрибутами, это className, так как class уже зарезервирован за React и атрибут htmlFor, т.к. атрибут for также зарезервирован.
____________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
/// Элементы и компоненты 

* Компоненты это блоки пользовательсокго интерфейса, которые имеют собственное поведение. (Например шапка сайта, подвал сайта)
* Элементы это структурные частички компонентов, а компоненты это уже самостоятельные единицы. Элементы неизменяемы, то есть не можем добавлять, удалять классы или атрибуты, чтобы изменить элементы надо его полностью перерисовать.

React компоненты всегда пишутся с большой буквы, компоненты это функции, которые могут возвращать JSX элементы.
Компоненты это функции, которые могут возвращать JSX элементы и внутри себя могут содержать какое-то поведение.
    
                const Header = () => {  // Это компонент
                    return <h2>Hello World!</h2>    // Это элемент
                }

                const Field = () => {   // Это компонент
                    const holder = 'Enter here';
                    const styledFiled = {
                        width: '300px'
                    }
                    return <input placeholder="Type here" type="text"/>     // Это элемент
                    return <input 
                            placeholder={holder} 
                            type="text" 
                            style={styledField}/>
                }

                function Btn() {  // Это компонент
                    const text = 'Log in'; // Это элемент
                    const res = () => {
                        return 'Log in'
                    }
                    const p = <p>Log in</p> // Это элемент
                    const logged = true;

                    return <button>{text}</button>
                    return <button>{res()}</button>
                    return <button>{p}</button>
                    return <button>{logged ? 'Enter' : text}</button>
                }

                function App() {    // Это компонент
                    return (
                        <div className = "App">
                            <Header/>
                            <Field/>
                            <Btn/>
                        </div>
                    );
                }

                export default App;

                Внутри фигурных скобок вставляемых в выражение нельзя использовать if, пока что можно только использовать теранарные операторы, однако эту логику с if можно прописать отдельно и уже передать результирующую переменную внутри фигурных скобок.

* Мы можем и должны писать компоненты в разных файлах и экспортировать и импортировать в другие файлы для удобного использования, в идеале для каждого компонента должен быть свой файл и уже экспортироваться туда куда он нужен (webpack).

                Пример именного экспорта/импорта:
                
                В файле App.js есть компонент Header и нам нужно экспортировать его в файл index.js
                
                В App.js пишем: export {Header};
                  index.js пишем: import {Header} from './App.js';

* Классы в JS по своей сути являются функциями, значит компоненты реакта могут быть классами, но сейчас идет тренд на функциональные компоненты.

____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________


____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________


____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________


____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________


____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________


____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________


____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________


____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________


____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________


____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________


____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________