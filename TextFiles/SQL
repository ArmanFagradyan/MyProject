* SQL is a language used for interacting with Relational Database Management Systems (RDBMS)

    - SQL can be used for:
            1) Create, retrieve, update and delete data 
            2) Create & manage databases
            3) Design & create database tables
            4) Perform administration tasks (security, user management, import/export, etc.)

    - SQL implementations vary between systems
            1) Not all RDBMS follo the SQL standart to a 'T'
            2) The concepts are the same but the implementations may vary

    - SQL is actually a hybrid language, it's basically 4 types of languages in one 
            1) Data Query Language (DQL)
                * Used to query databases for information.
                * Get information that is already stored there. 
            2) Data Defenition Language (DDL)
                * Used for defining databases schemas.
            3) Data Control Language (DCL)
                * Used for controlling the access to the data in the database.
                * User & Permissions management.  
            4) Data Manipulation Languagge (DML)
                * Used for inserting, updating and deleting data from the databases. 

* QUERIES 

    - A query is a set of instructions given to the RDBMS (written in SQL) thath tell the RDBMS what information you want it to retrieve for you 
            1) Tons of data in a DB 
            2) Often hidden in a comples schema 
            3) Goal is to only get the data you need  

* Working (MySQL)

    - to create a database type "create database name;"
    - main Datatypes:
        * INT   -- Whole numbers
        * DECIMAL(M, N)    -- Decimal numbers (M - number of digits, N - digits after ',')
        * VARCHAR(1)   -- String of text of length 1
        * BLOB    -- Binary large object, Stores large data 
        * DATE    -- 'YYYY-MM-DD'
        * TIMESTAMP    -- 'YYYY-MM-DD HH:MM:SS'

    - creating tables
        * In here we create a new table, set our main column names (in the begining we should build our table` schema), 
        set the primary key, DESCRIBE command shows the description of our new table.

            CREATE TABLE student (
                student_id INT,
                name VARCHAR(20),
                major VARCHAR(20),
                PRIMARY KEY(student_id)
            );

            DESCRIBE student;

            DROP TABLE stud;

            ALTER TABLE student ADD gpa DECIMAL(3, 2);

            ALTER TABLE student DROP COLUMN gpa;

    - To delete the table we use command DROP TABLE 'table_name';.

    - To change the table we use command ALTER TABLE 'table_name', then to add a column use ADD 'column_name' 'coloumn datatype';, also
    we can work with the specific column as in the example.

* Inserting data into the database table.

    - Here we are inserting sertain values into the student table in the order that are our columns created.

            CREATE TABLE student (
                student_id INT,
                name VARCHAR(20) NOT NULL,
                major VARCHAR(20) UNIQUE,
                PRIMARY KEY(student_id)
            );
            SELECT * FROM student; 

            INSERT INTO student VALUES(1, 'Jack', 'Biology');
            INSERT INTO student VALUES(2, 'Kate', 'Sociology');
            INSERT INTO student(student_id, name) VALUES(3, 'Claire');
            INSERT INTO student VALUES(4, 'Jack', 'Biology');
            INSERT INTO student VALUES(5, 'Mike', 'Computer Science');

    - To view our existing table use command SELECT * FROM 'table_name';. 
    - We can use constraint NOT NULL as in the example, to define that a particular column can't be a NULL.
    - We can use constraint UNIQUE as in the example, to define that the value of this column has to be unique in every row.
    - We can use constraint DEFAULT 'text' as in the example, to define the default value when nothing is stated.

    - We can use constraint AUTO_INCREMENT to the primary key as in the example, in order to not set them manualy

            CREATE TABLE student (
                student_id INT AUTO_INCREMENT,
                name VARCHAR(20), 
                major VARCHAR(20) DEFAULT 'undesided',
                PRIMARY KEY(student_id)
            );
            SELECT * FROM student; 

            INSERT INTO student(name, major) VALUES('Jack', 'Biology');
            INSERT INTO student(name, major) VALUES('Kate', 'Sociology');

* Updating and Deleting rows in the table.

    - We use command UPDATE to update the information in the table, in this example we changed major name 'Biology' to 'Bio'.
    - Without WHERE the command will apply to every row.
            UPDATE student 
            SET major = 'Bio'
            WHERE major = 'Biology'

            UPDATE student
            SET major = 'Biochemistry'
            WHERE major = 'Bio' OR major = 'Chemistry';

    - Here we use command DELETE to delete column that satisfy the condition.
            DELETE FROM student;
            WHERE student_id = 5;

* Basic Queries 
    
    - '*' tells to select every columns in the table, but thats not mandatory, also we can order the selection (DESC for descending order),
    also with WHERE condition we can use <, >, <=, >=, <>, AND, OR, also we can use IN as in the example below.

            SELECT * FROM student; 

            SELECT name, major FROM student ORDER BY name DESC;

            SELECT *
            FROM student
            ORDER BY student_id DESC
            LIMIT 5;

            SELECT *
            FROM student
            WHERE major = 'Biology';

            SELECT name, major
            FROM student
            WHERE major <> 'Chemistry';

            SELECT *
            FROM student
            WHERE name IN ('Claire', 'Kate', 'Mike');